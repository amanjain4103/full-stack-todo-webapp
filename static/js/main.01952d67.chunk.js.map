{"version":3,"sources":["components/Navbar/Navbar.js","components/Sidebar/Sidebar.js","components/Working/Working.js","components/Completed/Completed.js","components/Workspace/Workspace.js","components/Loginpage/Loginpage.js","components/Registerpage/Registerpage.js","components/PageLoading/PageLoading.js","App.js","index.js"],"names":["Navbar","props","className","fullname","href","onClick","handleHome","isLoggedIn","handleLogout","isSaveLoading","handleSave","color","currentRoute","handleLogin","handleRegister","Sidebar","projectlist","projects","map","project","key","projectKey","handleCurrentProjectId","name","icon","faTrash","size","handleDeleteProject","handleProjectName","Working","tasklist","tasks","task","taskKey","faCheckSquare","handleCheckSquare","handleDeleteTask","text","onSubmit","handleAdd","type","value","currentText","onChange","updateCurrentText","Completed","id","WorkSpace","workingTasks","filter","workingTask","isCompleted","currentProjectId","completedTasks","completedTask","Loginpage","handleGmail","event","setState","gmail","target","handlePassword","password","handleLoginForm","preventDefault","isLoading","user","state","fetch","headers","method","body","JSON","stringify","then","res","json","alert","whenLoginFormRecieveData","catch","err","console","log","handleGoogleStuff","response","googleUser","profileObj","email","googleId","this","style","marginLeft","htmlFor","placeholder","required","clientId","buttonText","onSuccess","onFailure","cookiePolicy","React","Component","Registerpage","handleFullname","handleRegisterForm","onRouteChangeInRegisterForm","PageLoading","temp","Date","now","App","trim","route","newProjectName","prompt","newProject","updatedProjects","window","confirm","updatedProject","updatedtasks","currentprojectid","textTyped","newTask","updatedTasks","taskkey","push","isPageLoading","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01952d67.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css'\nimport {  WaveLoading } from 'react-loadingg';\n\n\nconst Navbar = (props) => {\n    return(\n        <div className=\"nav\">\n            <span className=\"fullname\">\n                {props.fullname}\n            </span>\n            <a href=\"#\" onClick={props.handleHome}>HOME</a>\n            {(props.isLoggedIn===true)?\n                <div>\n                    <a href=\"#\" onClick={props.handleLogout}>LOGOUT</a>\n                    {(props.isSaveLoading!==true)?\n                     (<a href=\"#\" onClick={props.handleSave}>SAVE</a>):\n                     (<span className=\"loadButton\">\n                        < WaveLoading color={\"#000000\"}/>\n                      </span>)}\n                    \n                </div>:\n                (\n                    (props.currentRoute===\"main\")?\n                        <div>\n                            <a href=\"#\" onClick={props.handleLogin}>LOGIN</a>\n                            <a href=\"#\" onClick={props.handleRegister}>REGISTER</a>\n                        </div>\n                        :(props.currentRoute===\"registerpage\")?\n                        (\n                            <div>\n                                <a href=\"#\" onClick={props.handleLogin}>LOGIN</a>\n                            </div>\n                        ):(props.currentRoute===\"loginpage\")?\n                        (\n                            <div>\n                                <a href=\"#\" onClick={props.handleRegister}>REGISTER</a>\n                            </div>   \n                        ):\n                        <div>\n                            <a href=\"#\" onClick={props.handleLogout}>LOGOUT</a>\n                        </div>\n                )\n            }\n            \n\n        </div>\n    )\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './Sidebar.css';\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Sidebar = (props) => {\n\n    let projectlist = props.projects.map((project)=>{\n        return <button className=\"projectname\" \n                    key={project.projectKey}\n                    onClick={()=>props.handleCurrentProjectId(project.projectKey)}\n                >\n                    {project.name}\n                    <span>\n                        <FontAwesomeIcon icon={ faTrash } \n                            size='1x'\n                            onClick={()=>props.handleDeleteProject(project.projectKey)} \n                        />\n                    </span>\n               </button>\n    })\n\n    return(\n        <div className=\"sider\">\n            <button className=\"addprojectbtn\" onClick={props.handleProjectName}>+ ADD PROJECT</button>\n\n            <div className=\"projectList\">\n                {projectlist}\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar;","import React from 'react';\nimport './Working.css'\nimport { faTrash ,faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Working = (props) => {\n\n\n\n    var tasklist = props.tasks.map((task)=>{\n        return <button key={task.taskKey}>\n                    <span className=\"checksquare\">\n                        <FontAwesomeIcon icon={ faCheckSquare } \n                                    size='1x'\n                                    onClick={()=>props.handleCheckSquare(task.taskKey)} \n                        />\n                    </span>\n\n                    <span className=\"trash\">\n                    <FontAwesomeIcon icon={ faTrash } \n                            size='1x'\n                            onClick={()=>props.handleDeleteTask(task.taskKey)} \n                        />    \n                    </span>\n                    {task.text}\n                    \n                </button>\n    })\n\n\n    return (\n        <div className=\"working\">\n            <form onSubmit={props.handleAdd}>\n                <input type=\"text\" className=\"taskadder\" \n                    value={props.currentText} \n                    onChange={props.updateCurrentText} \n                />\n                <button type=\"submit\">+</button>\n            </form>\n            <div className=\"taskprint\">\n                \n                {tasklist}\n                \n            </div>\n\n        </div>\n    )\n}\n\nexport default Working;","import React from 'react';\nimport './Completed.css';\nimport { faTrash ,faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Completed = (props) => {\n    \n    var tasklist = props.tasks.map((task)=>{\n        return <button key={task.taskKey}>\n\n                    <span className=\"trash\">\n                    <FontAwesomeIcon icon={ faTrash } \n                            size='1x'\n                            onClick={()=>props.handleDeleteTask(task.taskKey)} \n                        />    \n                    </span>\n                    {task.text}\n                    \n                </button>\n    })\n    \n    return (\n        <div className=\"completed\">\n            <h1 className=\"header1\">COMPLETED</h1>\n            <div id=\"taskprint\">\n                \n                {tasklist}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Completed;","import React from 'react';\nimport './Workspace.css';\nimport Working from '../Working/Working';\nimport Completed from '../Completed/Completed';\n\n\nconst WorkSpace = (props) => {\n    \n    var workingTasks= props.tasks.filter((workingTask)=>{\n        return (workingTask.isCompleted===false && workingTask.projectKey===props.currentProjectId);\n    })\n\n    var completedTasks= props.tasks.filter((completedTask)=>{\n        return (completedTask.isCompleted===true && completedTask.projectKey===props.currentProjectId);\n    })\n  \n\n    return(\n        <div className=\"workhere\">\n            <Working \n            //    handleTask={props.handleTask}\n                handleAdd={props.handleAdd}\n                currentText={props.currentText}\n                tasks={workingTasks}\n                updateCurrentText={props.updateCurrentText}\n                handleDeleteTask={props.handleDeleteTask}\n                handleCheckSquare={props.handleCheckSquare}\n            />\n            <Completed tasks={completedTasks}\n                handleDeleteTask={props.handleDeleteTask}    \n            />\n        </div>\n    )\n}\n\nexport default WorkSpace;","import React from 'react';\nimport './Loginpage.css';\n// import { FaGooglePlusG } from \"react-icons/fa\";\nimport {  WaveLoading } from 'react-loadingg';\nimport { GoogleLogin } from 'react-google-login';\n\n\nclass Loginpage extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            gmail:\"\",\n            password:\"\",\n            isLoading:false\n        }\n    }\n\n    handleGmail = (event) => {\n        this.setState({\n            gmail:event.target.value\n        })\n\n    }\n\n    handlePassword = (event) => {\n        this.setState({\n            password:event.target.value\n        })\n\n    }\n\n    handleLoginForm = (event) => {\n        event.preventDefault();\n        this.setState({\n            isLoading:true\n        })\n        let user={\n            \"gmail\":this.state.gmail,\n            \"password\":this.state.password\n        }\n\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/login\",{\n            headers:{\n                'Content-Type':'application/json'\n            },\n            method:\"POST\",\n            body: JSON.stringify(user)\n        })\n        .then(res => res.json())\n        .then(res => {\n            //what should be done to response \n            if(res===\"wrongMail\"){\n                this.setState({\n                    isLoading:false\n                })\n                alert(\"you have entered wrong mail\");\n            }else if(res===\"wrongPassword\"){\n                this.setState({\n                    isLoading:false\n                })\n                alert(\"you have entered a wrong password\");\n            }else if(res===\"other\"){\n                this.setState({\n                    isLoading:false\n                })\n                alert(\"can't reach server\");\n            }else{\n                this.setState({\n                    isLoading:false\n                })\n                this.props.whenLoginFormRecieveData(res)\n            }\n        })\n        .catch(err => {\n            this.setState({\n                isLoading:false\n            })\n            alert(\"can't reach to server\")\n            console.log(err)\n        })       \n    }\n\n    handleGoogleStuff = (response) => {\n\n        let googleUser = {\n            fullname:response.profileObj.name,\n            gmail:response.profileObj.email,\n            password:response.profileObj.googleId\n        }\n        // console.log(googleUser)\n        this.setState({\n            isLoading:true\n        })\n\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/login\",{\n            headers:{\n                'Content-Type':'application/json'\n            },\n            method:\"POST\",\n            body: JSON.stringify(googleUser)\n        })\n        .then(res => res.json())\n        .then(res => {\n                //what should be done to response \n                if(res===\"wrongMail\"){\n                    this.setState({\n                        isLoading:false\n                    })\n                    alert(\"you have entered wrong mail\");\n                }else if(res===\"wrongPassword\"){\n                    this.setState({\n                        isLoading:false\n                    })\n                    alert(\"you have entered a wrong password\");\n                }else if(res===\"other\"){\n                    this.setState({\n                        isLoading:false\n                    })\n                    alert(\"can't reach server\");\n                }else{\n                    this.setState({\n                        isLoading:false\n                    })\n                    this.props.whenLoginFormRecieveData(res)\n                }\n            })\n            .catch(err => {\n                this.setState({\n                    isLoading:false\n                })\n                alert(\"can't reach to server\")\n                console.log(err)\n            })       \n        \n    }\n\n\n\n\n    render(){\n        return(\n            <div className=\"containertop\">\n    \n                <form onSubmit={this.handleLoginForm}>\n                    <h1 style={{marginLeft:\"30%\"}}>LOG IN</h1>\n                    <div>\n                        <div>\n                            <label htmlFor=\"gmail\"><strong>E-mail</strong></label><br />\n                            <input \n                             type=\"text\" \n                             placeholder=\"Enter E-mail\" \n                             name=\"gmail\" \n                             required\n                             onChange={this.handleGmail}\n                            />\n                        </div> \n                        <div>\n                            <label htmlFor=\"password\"><strong>Password</strong></label><br />\n                            <input \n                             type=\"password\" \n                             placeholder=\"Enter Password\" \n                             name=\"password\"\n                             required\n                             onChange={this.handlePassword}\n                            />\n                        </div>\n    \n                        <div>\n                            <GoogleLogin\n                                clientId=\"705596275371-h2jpgadc7ggp9s1nc8qelforr5n89nkl.apps.googleusercontent.com\"\n                                buttonText=\"Continue With Google\"\n                                onSuccess={this.handleGoogleStuff}\n                                onFailure={this.handleGoogleStuff}\n                                cookiePolicy={'single_host_origin'}\n                            />\n                        </div>\n                       \n                        <div>\n                        {this.state.isLoading===true?\n                            <span className=\"loading\">\n                                <br /><br /><br /><br />< WaveLoading color={\"#000000\"}/>\n                            </span>:\n                            <button type=\"submit\"><strong>LOG IN</strong></button>                \n                            }\n                                          \n                        </div>\n                        \n                    </div>\n                    \n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default Loginpage;\n","import React from 'react';\nimport './Registerpage.css';\n// import { FaGooglePlusG } from \"react-icons/fa\";\nimport {  WaveLoading } from 'react-loadingg';\nimport { GoogleLogin } from 'react-google-login';\n \n\n  \nclass Registerpage extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            fullname:\"\",\n            gmail:\"\",\n            password:\"\",\n            isLoading:false\n        }\n    }\n\n    handleFullname = (event) => {\n        this.setState({\n            fullname:event.target.value\n        })\n\n    }\n\n    handleGmail = (event) => {\n        this.setState({\n            gmail:event.target.value\n        })\n\n    }\n\n    handlePassword = (event) => {\n        this.setState({\n            password:event.target.value\n        })\n\n    }\n\n    handleRegisterForm = (event) => {\n        event.preventDefault();\n        \n        this.setState({\n            isLoading:true\n        })\n\n        let user={\n            \"fullname\":this.state.fullname,\n            \"gmail\":this.state.gmail,\n            \"password\":this.state.password\n        }\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/register\",{\n            headers:{\n                'Content-Type':'application/json'\n            },\n            method:\"POST\",\n            body: JSON.stringify(user)\n        })\n        .then(res => res.json())\n        .then(res => {\n            //what should be done to response \n            this.setState({\n                isLoading:true\n            })\n\n            if(res===\"other\"){\n                alert(\"some error occured\");\n            }else if(res===\"registered\"){\n                this.props.onRouteChangeInRegisterForm();\n                alert(\"successfully registered\");\n            }else{\n                this.props.onRouteChangeInRegisterForm();\n                alert(\" you are already registered , try login\");\n            }\n        })\n        .catch(err => {\n            this.setState({\n                isLoading:false\n            })\n            alert(\"can't reach to server\")\n            console.log(err)\n        })\n\n    }\n\n    handleGoogleStuff = (response) => {\n\n        let googleUser = {\n            fullname:response.profileObj.name,\n            gmail:response.profileObj.email,\n            password:response.profileObj.googleId\n        }\n        // console.log(googleUser)\n        this.setState({\n            isLoading:true\n        })\n\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/register\",{\n            headers:{\n                'Content-Type':'application/json'\n            },\n            method:\"POST\",\n            body: JSON.stringify(googleUser)\n        })\n        .then(res => res.json())\n        .then(res => {\n            //what should be done to response \n            this.setState({\n                isLoading:true\n            })\n\n            if(res===\"other\"){\n                alert(\"some error occured\");\n            }else if(res===\"registered\"){\n                this.props.onRouteChangeInRegisterForm();\n                alert(\"successfully registered\");\n            }else{\n                this.props.onRouteChangeInRegisterForm();\n                alert(\" you are already registered , try login\");\n            }\n        })\n        .catch(err => {\n            this.setState({\n                isLoading:false\n            })\n            alert(\"can't reach to server\")\n            console.log(err)\n        })\n\n    }\n\n    render(){\n\n        return (\n            <div className=\"containertop\">\n                \n                <form onSubmit={this.handleRegisterForm}>\n                    <h1 style={{marginLeft:\"30%\"}}>REGISTER</h1>\n                    <div>\n                        <div>\n                            <label htmlFor=\"fullname\"><strong>Full Name</strong></label><br />\n                            <input \n                             type=\"text\" \n                             placeholder=\"Enter Full Name\" \n                             name=\"fullname\" \n                             required \n                             onChange={this.handleFullname}\n                            />\n                        </div>\n                        <div>\n                            <label htmlFor=\"gmail\"><strong>E-mail</strong></label><br />\n                            <input \n                             type=\"text\" \n                             placeholder=\"Enter E-mail\" \n                             name=\"gmail\" \n                             required \n                             onChange={this.handleGmail}\n                            />\n                        </div> \n                        <div>\n                            <label htmlFor=\"password\"><strong>Password</strong></label><br />\n                            <input \n                             type=\"password\" \n                             placeholder=\"Enter Password\"\n                             name=\"password\" \n                             required \n                             onChange={this.handlePassword}\n                            />\n                        </div>\n                        <div className=\"google-button\">\n                            <GoogleLogin\n                                clientId=\"705596275371-h2jpgadc7ggp9s1nc8qelforr5n89nkl.apps.googleusercontent.com\"\n                                buttonText=\"Continue With Google\"\n                                onSuccess={this.handleGoogleStuff}\n                                onFailure={this.handleGoogleStuff}\n                                cookiePolicy={'single_host_origin'}\n                            />\n                        </div>\n                        {/* <div><br />\n                            <a href=\"#\" onClick={this.handleGoogleStuff}>\n                                <span>\n                                    <FaGooglePlusG  />\n                                </span>\n                                CONTINUE WITH GOOGLE\n                            </a>\n                        </div> */}\n                       \n                        <div>\n                            {this.state.isLoading===true?\n                            <span className=\"loading\">\n                                <br /><br /><br /><br />< WaveLoading color={\"#000000\"}/>\n                            </span>:\n                            <button type=\"submit\"><strong>REGISTER</strong></button>                \n                            }\n                        </div>\n                        \n                    </div>\n                    \n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default Registerpage;\n","import React from 'react';\nimport { SemipolarLoading } from 'react-loadingg';\nimport './PageLoading.css';\n\nconst PageLoading = (props) => {\n    return(\n        <div className=\"pageloading\">\n            <span className=\"loader\">\n                <SemipolarLoading size=\"large\" />\n            </span>\n        </div>\n    )\n}\n//WindMillLoading \nexport default PageLoading;","import React from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Workspace from './components/Workspace/Workspace';\nimport Loginpage from './components/Loginpage/Loginpage.js';\nimport Registerpage from './components/Registerpage/Registerpage.js';\nimport { WaveLoading } from 'react-loadingg';\nimport './App.css';\nimport PageLoading from './components/PageLoading/PageLoading';\n\n\n// var stateToUpload={};\nvar temp=Date.now();\n\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      route:\"main\",\n      projects:[{ \"projectKey\":temp,\n                \"name\":\"welcome\"}\n      ],\n      tasks:[{\"taskKey\":temp,\n              \"text\":\"this is sample text\",\n              \"isCompleted\":false,\n              \"projectKey\":temp}\n      ],\n      currentProjectId:temp,\n      currentText:\"\",\n      isLoggedIn:false,\n      fullname:\"Hii There !!!\",\n      gmail:\"\",\n      isSaveLoading:false,\n      isPageLoading:true\n    };\n  }\n\n  componentDidMount(){\n    this.setState({\n      isPageLoading:false\n    })\n  }\n  //this will save all changes you made to your to do list\n  //this is triggered when you are logged in and click on save button\n  \n  handleSave = ()=>{\n    if(this.state.gmail.trim()!==\"\"){\n      this.setState({\n        isSaveLoading:true\n      })\n      fetch(\"https://sleepy-bayou-07933.herokuapp.com/update\",{\n          headers:{\n              'Content-Type':'application/json'\n          },\n          method:\"POST\",\n          body: JSON.stringify({\n            gmail:this.state.gmail,\n            projects:this.state.projects,\n            tasks:this.state.tasks\n          }) \n      }).then(res=>res.json())\n       .then(res=>{\n         if(res===\"updated\"){\n          this.setState({\n            isSaveLoading:false\n          })\n         }else{\n          this.setState({\n            isSaveLoading:false\n          })\n          alert(\"cant't raech server\");\n         }\n       })\n       .catch(err => {\n        this.setState({\n            isSaveLoading:false\n        })\n        alert(\"can't reach to server\")\n        console.log(err)\n        })\n      \n  \n    }else{\n      console.log(\"not logged in\")\n    }\n    \n  }\n\n\n  handleLogin = ()=>{\n\n        this.setState({\n          route:\"loginpage\"\n        })\n  }\n    \n  handleLogout = ()=>{\n    this.handleSave();\n    this.setState({\n      route:\"main\",\n      projects:[{ \"projectKey\":temp,\n                 \"name\":\"welcome\"}\n      ],\n      tasks:[{\"taskKey\":temp,\n              \"text\":\"this is sample text\",\n              \"isCompleted\":false,\n              \"projectKey\":temp}\n      ],\n      currentProjectId:temp,\n      currentText:\"\",\n      isLoggedIn:false,\n      fullname:\"Hii There !!!\",\n      gmail:\"\",\n      isSaveLoading:false\n    })\n  }\n\n  handleRegister = ()=>{\n    this.setState({\n      route:\"registerpage\"\n    })\n  }\n\n  handleHome = ()=>{\n    this.setState({\n      route:\"main\"\n    })\n  }\n\n  //adding project functionality button in maintained\n  //triggered when add project button is clicked \n  handleProjectName = () => {\n    var newProjectName = prompt(\"Enter project name\");\n    if(newProjectName!==null){\n      if(newProjectName.trim()!==\"\"){\n\n        var newProject = { \"projectKey\":Date.now(),\"name\":newProjectName } \n        var updatedProjects = [...this.state.projects,newProject];\n        \n        this.setState({\n          projects:updatedProjects\n        })\n        \n      }\n    }\n    \n  }\n\n  //this is deleting project and also tasks associated with that project\n  //triggered when trash icon of project is clicked \n  handleDeleteProject = (projectKey) => {\n    \n    //asking for confirmation \n    var areYouSure = window.confirm(\"Are you sure, this will delete your project\");\n    \n    if(areYouSure){\n\n      //deleting projects\n      var updatedProject = this.state.projects.filter((project)=>{\n        return project.projectKey!==projectKey\n      })\n      this.setState({\n        projects:updatedProject\n      })\n\n      //deleting tasks\n      var updatedtasks = this.state.tasks.filter((task)=>{\n        return task.projectKey!==projectKey\n      })\n\n      this.setState({\n        tasks:updatedtasks\n      })\n\n    }\n\n  }\n\n  //this will update the state of currentProjectId\n  //triggered when you click on project name\n  handleCurrentProjectId = (currentprojectid) =>{\n    this.setState({currentProjectId:currentprojectid})\n  }\n\n\n  //this will update the input field by updating currentText state\n  //called when change is detected in task adding input box\n  updateCurrentText = (event) => {\n    this.setState({currentText:event.target.value})\n  }\n\n  //this will create new task having current projectKey\n  //triggered when + button is clicked \n  handleAdd = (event) => {\n    event.preventDefault(); \n    let textTyped = this.state.currentText\n    \n    if(textTyped!==null){\n      if(textTyped.trim()!==\"\"){\n        var newTask = {\"taskKey\":Date.now(),\n          \"text\":this.state.currentText,\n          \"isCompleted\":false,\n          \"projectKey\":this.state.currentProjectId \n        }\n        \n        var updatedTasks = [...this.state.tasks,newTask];\n        this.setState({tasks:updatedTasks,currentText:\"\"})\n\n      }\n    }\n  }\n\n  //this will delete task simply using filter on taskKey\n  //triggered when you click trash icon of any task\n  handleDeleteTask = (taskkey) => {\n    \n    var updatedTasks = this.state.tasks.filter((task)=>{\n      return task.taskKey!==taskkey\n    })\n\n    this.setState({tasks:updatedTasks})\n  }\n\n\n  //this will get task having just checked check square set isCompleted property of that task to true\n  //triggered when you click on check square icon\n  handleCheckSquare = (taskkey) => {\n    var updatedTasks = this.state.tasks.filter((task)=>{\n      return task.taskKey!==taskkey\n    })\n\n    var completedTask = this.state.tasks.filter((task)=>{\n      return task.taskKey===taskkey\n    })\n    completedTask[0].isCompleted=true;\n    updatedTasks.push(completedTask[0]);\n\n    this.setState({tasks:updatedTasks})\n  } \n\n  //this will change route according to user register status\n  //triggered when response for register form is recieved\n  onRouteChangeInRegisterForm = () => {\n    this.setState({\n      route:\"loginpage\"\n    })\n  }\n\n  //this will change all view of the homepage and update state for db data\n  //triggered when we recieve userData\n  whenLoginFormRecieveData = (user) => {\n    this.setState({\n      route:\"main\",\n      isLoggedIn:true,\n      projects:user.projects,\n      tasks:user.tasks,\n      fullname:user.fullname,\n      gmail:user.gmail\n    })\n  }\n\n  //adding event listener so that when user closes this webapp his data will be saved\n  \n  // componentWillUnmount(){\n  //   window.addEventListener('beforeunload',(ev)=>{\n  //     ev.preventDefault();\n  //     console.log(\"hjj\")\n  //   })\n  // }\n\n  render(){\n\n    return (\n      <div> \n        {(this.state.isPageLoading===true)?\n          (<PageLoading />):\n          (\n            <div>\n              <Navbar \n              currentRoute={this.state.route} \n              handleLogin={this.handleLogin} \n              handleLogout={this.handleLogout}\n              handleRegister={this.handleRegister}\n              handleHome={this.handleHome}\n              isLoggedIn={this.state.isLoggedIn}\n              handleSave={this.handleSave}\n              isSaveLoading={this.state.isSaveLoading}\n              fullname={this.state.fullname}\n              />\n\n              {this.state.route===\"loginpage\"?\n              <Loginpage \n              whenLoginFormRecieveData={this.whenLoginFormRecieveData}\n              />  :\n                (\n                  this.state.route===\"registerpage\"?\n                  <Registerpage \n                  onRouteChangeInRegisterForm={this.onRouteChangeInRegisterForm}\n                  /> :\n                  <div>\n                    <Sidebar \n                    handleProjectName={this.handleProjectName} \n                    projects={this.state.projects}\n                    handleDeleteProject={this.handleDeleteProject}\n                    handleCurrentProjectId={this.handleCurrentProjectId}\n                    />\n\n                    <Workspace \n                    handleAdd={this.handleAdd}\n                    currentText={this.state.currentText}\n                    currentProjectId={this.state.currentProjectId}\n                    tasks={this.state.tasks}\n                    updateCurrentText={this.updateCurrentText}\n                    handleDeleteTask ={this.handleDeleteTask}\n                    handleCheckSquare={this.handleCheckSquare}\n                    />\n\n                  </div>\n                )\n            \n              }\n            </div>\n          )\n        }\n        \n \n      </div>\n    )\n  }\n}\n\n// window.addEventListener('beforeunload', (event) => {\n//   // Cancel the event as stated by the standard.\n//   event.preventDefault();\n  \n//   if(stateToUpload.gmail.trim()!==\"\"){\n    \n//     fetch(\"http://localhost:4000/update\",{\n//         headers:{\n//             'Content-Type':'application/json'\n//         },\n//         method:\"POST\",\n//         body: JSON.stringify({\n//           gmail:stateToUpload.gmail,\n//           projects:stateToUpload.projects,\n//           tasks:stateToUpload.tasks\n//         }) \n//     }).then(res=>res.json())\n//      .then(res=>console.log(res))\n    \n\n//   }else{\n//     console.log(\"not logged in\")\n//   }\n  \n  \n//  console.log(stateToUpload)\n//  Chrome requires returnValue to be set.\n//  event.returnValue = 'your tasks will be saved';\n// });\n\n\nexport default App;\n\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}