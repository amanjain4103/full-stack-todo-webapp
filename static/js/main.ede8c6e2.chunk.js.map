{"version":3,"sources":["components/Navbar/Navbar.js","components/Sidebar/Sidebar.js","components/Working/Working.js","components/Completed/Completed.js","components/Workspace/Workspace.js","components/Loginpage/Loginpage.js","components/Registerpage/Registerpage.js","components/PageLoading/PageLoading.js","App.js","index.js"],"names":["Navbar","props","className","fullname","href","onClick","handleHome","isLoggedIn","handleLogout","isSaveLoading","handleSave","color","currentRoute","handleLogin","handleRegister","Sidebar","projectlist","projects","map","project","key","projectKey","handleCurrentProjectId","name","icon","faTrash","size","handleDeleteProject","handleProjectName","Working","tasklist","tasks","task","taskKey","faCheckSquare","handleCheckSquare","handleDeleteTask","text","onSubmit","handleAdd","type","value","currentText","onChange","updateCurrentText","Completed","id","WorkSpace","workingTasks","filter","workingTask","isCompleted","currentProjectId","completedTasks","completedTask","Loginpage","handleGmail","event","setState","gmail","target","handlePassword","password","handleLoginForm","preventDefault","isLoading","user","state","fetch","headers","method","body","JSON","stringify","then","res","json","alert","whenLoginFormRecieveData","catch","err","console","log","handleGoogleStuff","response","googleUser","profileObj","email","googleId","this","style","marginLeft","htmlFor","placeholder","required","clientId","buttonText","onSuccess","onFailure","cookiePolicy","React","Component","Registerpage","handleFullname","handleRegisterForm","onRouteChangeInRegisterForm","PageLoading","temp","Date","now","App","trim","route","newProjectName","prompt","newProject","updatedProjects","window","confirm","updatedProject","updatedtasks","currentprojectid","textTyped","newTask","updatedTasks","taskkey","push","isPageLoading","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ede8c6e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css'\r\nimport {  WaveLoading } from 'react-loadingg';\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return(\r\n        <div className=\"nav\">\r\n            <span className=\"fullname\">\r\n                {props.fullname}\r\n            </span>\r\n            <a href=\"#\" onClick={props.handleHome}>HOME</a>\r\n            {(props.isLoggedIn===true)?\r\n                <div>\r\n                    <a href=\"#\" onClick={props.handleLogout}>LOGOUT</a>\r\n                    {(props.isSaveLoading!==true)?\r\n                     (<a href=\"#\" onClick={props.handleSave}>SAVE</a>):\r\n                     (<span className=\"loadButton\">\r\n                        < WaveLoading color={\"#000000\"}/>\r\n                      </span>)}\r\n                    \r\n                </div>:\r\n                (\r\n                    (props.currentRoute===\"main\")?\r\n                        <div>\r\n                            <a href=\"#\" onClick={props.handleLogin}>LOGIN</a>\r\n                            <a href=\"#\" onClick={props.handleRegister}>REGISTER</a>\r\n                        </div>\r\n                        :(props.currentRoute===\"registerpage\")?\r\n                        (\r\n                            <div>\r\n                                <a href=\"#\" onClick={props.handleLogin}>LOGIN</a>\r\n                            </div>\r\n                        ):(props.currentRoute===\"loginpage\")?\r\n                        (\r\n                            <div>\r\n                                <a href=\"#\" onClick={props.handleRegister}>REGISTER</a>\r\n                            </div>   \r\n                        ):\r\n                        <div>\r\n                            <a href=\"#\" onClick={props.handleLogout}>LOGOUT</a>\r\n                        </div>\r\n                )\r\n            }\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './Sidebar.css';\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Sidebar = (props) => {\r\n\r\n    let projectlist = props.projects.map((project)=>{\r\n        return <button className=\"projectname\" \r\n                    key={project.projectKey}\r\n                    onClick={()=>props.handleCurrentProjectId(project.projectKey)}\r\n                >\r\n                    {project.name}\r\n                    <span>\r\n                        <FontAwesomeIcon icon={ faTrash } \r\n                            size='1x'\r\n                            onClick={()=>props.handleDeleteProject(project.projectKey)} \r\n                        />\r\n                    </span>\r\n               </button>\r\n    })\r\n\r\n    return(\r\n        <div className=\"sider\">\r\n            <button className=\"addprojectbtn\" onClick={props.handleProjectName}>+ ADD PROJECT</button>\r\n\r\n            <div className=\"projectList\">\r\n                {projectlist}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport './Working.css'\r\nimport { faTrash ,faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Working = (props) => {\r\n\r\n\r\n\r\n    var tasklist = props.tasks.map((task)=>{\r\n        return <button key={task.taskKey}>\r\n                    <span className=\"checksquare\">\r\n                        <FontAwesomeIcon icon={ faCheckSquare } \r\n                                    size='1x'\r\n                                    onClick={()=>props.handleCheckSquare(task.taskKey)} \r\n                        />\r\n                    </span>\r\n\r\n                    <span className=\"trash\">\r\n                    <FontAwesomeIcon icon={ faTrash } \r\n                            size='1x'\r\n                            onClick={()=>props.handleDeleteTask(task.taskKey)} \r\n                        />    \r\n                    </span>\r\n                    {task.text}\r\n                    \r\n                </button>\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"working\">\r\n            <form onSubmit={props.handleAdd}>\r\n                <input type=\"text\" className=\"taskadder\" \r\n                    value={props.currentText} \r\n                    onChange={props.updateCurrentText} \r\n                />\r\n                <button type=\"submit\">+</button>\r\n            </form>\r\n            <div className=\"taskprint\">\r\n                \r\n                {tasklist}\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Working;","import React from 'react';\r\nimport './Completed.css';\r\nimport { faTrash ,faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Completed = (props) => {\r\n    \r\n    var tasklist = props.tasks.map((task)=>{\r\n        return <button key={task.taskKey}>\r\n\r\n                    <span className=\"trash\">\r\n                    <FontAwesomeIcon icon={ faTrash } \r\n                            size='1x'\r\n                            onClick={()=>props.handleDeleteTask(task.taskKey)} \r\n                        />    \r\n                    </span>\r\n                    {task.text}\r\n                    \r\n                </button>\r\n    })\r\n    \r\n    return (\r\n        <div className=\"completed\">\r\n            <h1 className=\"header1\">COMPLETED</h1>\r\n            <div id=\"taskprint\">\r\n                \r\n                {tasklist}\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Completed;","import React from 'react';\r\nimport './Workspace.css';\r\nimport Working from '../Working/Working';\r\nimport Completed from '../Completed/Completed';\r\n\r\n\r\nconst WorkSpace = (props) => {\r\n    \r\n    var workingTasks= props.tasks.filter((workingTask)=>{\r\n        return (workingTask.isCompleted===false && workingTask.projectKey===props.currentProjectId);\r\n    })\r\n\r\n    var completedTasks= props.tasks.filter((completedTask)=>{\r\n        return (completedTask.isCompleted===true && completedTask.projectKey===props.currentProjectId);\r\n    })\r\n  \r\n\r\n    return(\r\n        <div className=\"workhere\">\r\n            <Working \r\n            //    handleTask={props.handleTask}\r\n                handleAdd={props.handleAdd}\r\n                currentText={props.currentText}\r\n                tasks={workingTasks}\r\n                updateCurrentText={props.updateCurrentText}\r\n                handleDeleteTask={props.handleDeleteTask}\r\n                handleCheckSquare={props.handleCheckSquare}\r\n            />\r\n            <Completed tasks={completedTasks}\r\n                handleDeleteTask={props.handleDeleteTask}    \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkSpace;","import React from 'react';\r\nimport './Loginpage.css';\r\n// import { FaGooglePlusG } from \"react-icons/fa\";\r\nimport {  WaveLoading } from 'react-loadingg';\r\nimport { GoogleLogin } from 'react-google-login';\r\n\r\n\r\nclass Loginpage extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            gmail:\"\",\r\n            password:\"\",\r\n            isLoading:false\r\n        }\r\n    }\r\n\r\n    handleGmail = (event) => {\r\n        this.setState({\r\n            gmail:event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handlePassword = (event) => {\r\n        this.setState({\r\n            password:event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleLoginForm = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            isLoading:true\r\n        })\r\n        let user={\r\n            \"gmail\":this.state.gmail,\r\n            \"password\":this.state.password\r\n        }\r\n\r\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/login\",{\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            method:\"POST\",\r\n            body: JSON.stringify(user)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            //what should be done to response \r\n            if(res===\"wrongMail\"){\r\n                this.setState({\r\n                    isLoading:false\r\n                })\r\n                alert(\"you have entered wrong mail\");\r\n            }else if(res===\"wrongPassword\"){\r\n                this.setState({\r\n                    isLoading:false\r\n                })\r\n                alert(\"you have entered a wrong password\");\r\n            }else if(res===\"other\"){\r\n                this.setState({\r\n                    isLoading:false\r\n                })\r\n                alert(\"can't reach server\");\r\n            }else{\r\n                this.setState({\r\n                    isLoading:false\r\n                })\r\n                this.props.whenLoginFormRecieveData(res)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            this.setState({\r\n                isLoading:false\r\n            })\r\n            alert(\"can't reach to server\")\r\n            console.log(err)\r\n        })       \r\n    }\r\n\r\n    handleGoogleStuff = (response) => {\r\n\r\n        let googleUser = {\r\n            fullname:response.profileObj.name,\r\n            gmail:response.profileObj.email,\r\n            password:response.profileObj.googleId\r\n        }\r\n        // console.log(googleUser)\r\n        this.setState({\r\n            isLoading:true\r\n        })\r\n\r\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/login\",{\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            method:\"POST\",\r\n            body: JSON.stringify(googleUser)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n                //what should be done to response \r\n                if(res===\"wrongMail\"){\r\n                    this.setState({\r\n                        isLoading:false\r\n                    })\r\n                    alert(\"you have entered wrong mail\");\r\n                }else if(res===\"wrongPassword\"){\r\n                    this.setState({\r\n                        isLoading:false\r\n                    })\r\n                    alert(\"you have entered a wrong password\");\r\n                }else if(res===\"other\"){\r\n                    this.setState({\r\n                        isLoading:false\r\n                    })\r\n                    alert(\"can't reach server\");\r\n                }else{\r\n                    this.setState({\r\n                        isLoading:false\r\n                    })\r\n                    this.props.whenLoginFormRecieveData(res)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    isLoading:false\r\n                })\r\n                alert(\"can't reach to server\")\r\n                console.log(err)\r\n            })       \r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"containertop\">\r\n    \r\n                <form onSubmit={this.handleLoginForm}>\r\n                    <h1 style={{marginLeft:\"30%\"}}>LOG IN</h1>\r\n                    <div>\r\n                        <div>\r\n                            <label htmlFor=\"gmail\"><strong>E-mail</strong></label><br />\r\n                            <input \r\n                             type=\"text\" \r\n                             placeholder=\"Enter E-mail\" \r\n                             name=\"gmail\" \r\n                             required\r\n                             onChange={this.handleGmail}\r\n                            />\r\n                        </div> \r\n                        <div>\r\n                            <label htmlFor=\"password\"><strong>Password</strong></label><br />\r\n                            <input \r\n                             type=\"password\" \r\n                             placeholder=\"Enter Password\" \r\n                             name=\"password\"\r\n                             required\r\n                             onChange={this.handlePassword}\r\n                            />\r\n                        </div>\r\n    \r\n                        <div>\r\n                            <GoogleLogin\r\n                                clientId=\"705596275371-h2jpgadc7ggp9s1nc8qelforr5n89nkl.apps.googleusercontent.com\"\r\n                                buttonText=\"Continue With Google\"\r\n                                onSuccess={this.handleGoogleStuff}\r\n                                onFailure={this.handleGoogleStuff}\r\n                                cookiePolicy={'single_host_origin'}\r\n                            />\r\n                        </div>\r\n                       \r\n                        <div>\r\n                        {this.state.isLoading===true?\r\n                            <span className=\"loading\">\r\n                                <br /><br /><br /><br />< WaveLoading color={\"#000000\"}/>\r\n                            </span>:\r\n                            <button type=\"submit\"><strong>LOG IN</strong></button>                \r\n                            }\r\n                                          \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Loginpage;\r\n","import React from 'react';\r\nimport './Registerpage.css';\r\n// import { FaGooglePlusG } from \"react-icons/fa\";\r\nimport {  WaveLoading } from 'react-loadingg';\r\nimport { GoogleLogin } from 'react-google-login';\r\n \r\n\r\n  \r\nclass Registerpage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            fullname:\"\",\r\n            gmail:\"\",\r\n            password:\"\",\r\n            isLoading:false\r\n        }\r\n    }\r\n\r\n    handleFullname = (event) => {\r\n        this.setState({\r\n            fullname:event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleGmail = (event) => {\r\n        this.setState({\r\n            gmail:event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handlePassword = (event) => {\r\n        this.setState({\r\n            password:event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleRegisterForm = (event) => {\r\n        event.preventDefault();\r\n        \r\n        this.setState({\r\n            isLoading:true\r\n        })\r\n\r\n        let user={\r\n            \"fullname\":this.state.fullname,\r\n            \"gmail\":this.state.gmail,\r\n            \"password\":this.state.password\r\n        }\r\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/register\",{\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            method:\"POST\",\r\n            body: JSON.stringify(user)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            //what should be done to response \r\n            this.setState({\r\n                isLoading:true\r\n            })\r\n\r\n            if(res===\"other\"){\r\n                alert(\"some error occured\");\r\n            }else if(res===\"registered\"){\r\n                this.props.onRouteChangeInRegisterForm();\r\n                alert(\"successfully registered\");\r\n            }else{\r\n                this.props.onRouteChangeInRegisterForm();\r\n                alert(\" you are already registered , try login\");\r\n            }\r\n        })\r\n        .catch(err => {\r\n            this.setState({\r\n                isLoading:false\r\n            })\r\n            alert(\"can't reach to server\")\r\n            console.log(err)\r\n        })\r\n\r\n    }\r\n\r\n    handleGoogleStuff = (response) => {\r\n\r\n        let googleUser = {\r\n            fullname:response.profileObj.name,\r\n            gmail:response.profileObj.email,\r\n            password:response.profileObj.googleId\r\n        }\r\n        // console.log(googleUser)\r\n        this.setState({\r\n            isLoading:true\r\n        })\r\n\r\n        fetch(\"https://sleepy-bayou-07933.herokuapp.com/register\",{\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            method:\"POST\",\r\n            body: JSON.stringify(googleUser)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            //what should be done to response \r\n            this.setState({\r\n                isLoading:true\r\n            })\r\n\r\n            if(res===\"other\"){\r\n                alert(\"some error occured\");\r\n            }else if(res===\"registered\"){\r\n                this.props.onRouteChangeInRegisterForm();\r\n                alert(\"successfully registered\");\r\n            }else{\r\n                this.props.onRouteChangeInRegisterForm();\r\n                alert(\" you are already registered , try login\");\r\n            }\r\n        })\r\n        .catch(err => {\r\n            this.setState({\r\n                isLoading:false\r\n            })\r\n            alert(\"can't reach to server\")\r\n            console.log(err)\r\n        })\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className=\"containertop\">\r\n                \r\n                <form onSubmit={this.handleRegisterForm}>\r\n                    <h1 style={{marginLeft:\"30%\"}}>REGISTER</h1>\r\n                    <div>\r\n                        <div>\r\n                            <label htmlFor=\"fullname\"><strong>Full Name</strong></label><br />\r\n                            <input \r\n                             type=\"text\" \r\n                             placeholder=\"Enter Full Name\" \r\n                             name=\"fullname\" \r\n                             required \r\n                             onChange={this.handleFullname}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"gmail\"><strong>E-mail</strong></label><br />\r\n                            <input \r\n                             type=\"text\" \r\n                             placeholder=\"Enter E-mail\" \r\n                             name=\"gmail\" \r\n                             required \r\n                             onChange={this.handleGmail}\r\n                            />\r\n                        </div> \r\n                        <div>\r\n                            <label htmlFor=\"password\"><strong>Password</strong></label><br />\r\n                            <input \r\n                             type=\"password\" \r\n                             placeholder=\"Enter Password\"\r\n                             name=\"password\" \r\n                             required \r\n                             onChange={this.handlePassword}\r\n                            />\r\n                        </div>\r\n                        <div className=\"google-button\">\r\n                            <GoogleLogin\r\n                                clientId=\"705596275371-h2jpgadc7ggp9s1nc8qelforr5n89nkl.apps.googleusercontent.com\"\r\n                                buttonText=\"Continue With Google\"\r\n                                onSuccess={this.handleGoogleStuff}\r\n                                onFailure={this.handleGoogleStuff}\r\n                                cookiePolicy={'single_host_origin'}\r\n                            />\r\n                        </div>\r\n                        {/* <div><br />\r\n                            <a href=\"#\" onClick={this.handleGoogleStuff}>\r\n                                <span>\r\n                                    <FaGooglePlusG  />\r\n                                </span>\r\n                                CONTINUE WITH GOOGLE\r\n                            </a>\r\n                        </div> */}\r\n                       \r\n                        <div>\r\n                            {this.state.isLoading===true?\r\n                            <span className=\"loading\">\r\n                                <br /><br /><br /><br />< WaveLoading color={\"#000000\"}/>\r\n                            </span>:\r\n                            <button type=\"submit\"><strong>REGISTER</strong></button>                \r\n                            }\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Registerpage;\r\n","import React from 'react';\r\nimport { SemipolarLoading } from 'react-loadingg';\r\nimport './PageLoading.css';\r\n\r\nconst PageLoading = (props) => {\r\n    return(\r\n        <div className=\"pageloading\">\r\n            <span className=\"loader\">\r\n                <SemipolarLoading size=\"large\" />\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n//WindMillLoading \r\nexport default PageLoading;","import React from 'react';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\nimport Workspace from './components/Workspace/Workspace';\r\nimport Loginpage from './components/Loginpage/Loginpage.js';\r\nimport Registerpage from './components/Registerpage/Registerpage.js';\r\nimport { WaveLoading } from 'react-loadingg';\r\nimport './App.css';\r\nimport PageLoading from './components/PageLoading/PageLoading';\r\n\r\n\r\n// var stateToUpload={};\r\nvar temp=Date.now();\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      route:\"main\",\r\n      projects:[{ \"projectKey\":temp,\r\n                \"name\":\"welcome\"}\r\n      ],\r\n      tasks:[{\"taskKey\":temp,\r\n              \"text\":\"this is sample text\",\r\n              \"isCompleted\":false,\r\n              \"projectKey\":temp}\r\n      ],\r\n      currentProjectId:temp,\r\n      currentText:\"\",\r\n      isLoggedIn:false,\r\n      fullname:\"Hii There !!!\",\r\n      gmail:\"\",\r\n      isSaveLoading:false,\r\n      isPageLoading:true\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({\r\n      isPageLoading:false\r\n    })\r\n  }\r\n  //this will save all changes you made to your to do list\r\n  //this is triggered when you are logged in and click on save button\r\n  \r\n  handleSave = ()=>{\r\n    if(this.state.gmail.trim()!==\"\"){\r\n      this.setState({\r\n        isSaveLoading:true\r\n      })\r\n      fetch(\"https://sleepy-bayou-07933.herokuapp.com/update\",{\r\n          headers:{\r\n              'Content-Type':'application/json'\r\n          },\r\n          method:\"POST\",\r\n          body: JSON.stringify({\r\n            gmail:this.state.gmail,\r\n            projects:this.state.projects,\r\n            tasks:this.state.tasks\r\n          }) \r\n      }).then(res=>res.json())\r\n       .then(res=>{\r\n         if(res===\"updated\"){\r\n          this.setState({\r\n            isSaveLoading:false\r\n          })\r\n         }else{\r\n          this.setState({\r\n            isSaveLoading:false\r\n          })\r\n          alert(\"cant't raech server\");\r\n         }\r\n       })\r\n       .catch(err => {\r\n        this.setState({\r\n            isSaveLoading:false\r\n        })\r\n        alert(\"can't reach to server\")\r\n        console.log(err)\r\n        })\r\n      \r\n  \r\n    }else{\r\n      console.log(\"not logged in\")\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  handleLogin = ()=>{\r\n\r\n        this.setState({\r\n          route:\"loginpage\"\r\n        })\r\n  }\r\n    \r\n  handleLogout = ()=>{\r\n    this.handleSave();\r\n    this.setState({\r\n      route:\"main\",\r\n      projects:[{ \"projectKey\":temp,\r\n                 \"name\":\"welcome\"}\r\n      ],\r\n      tasks:[{\"taskKey\":temp,\r\n              \"text\":\"this is sample text\",\r\n              \"isCompleted\":false,\r\n              \"projectKey\":temp}\r\n      ],\r\n      currentProjectId:temp,\r\n      currentText:\"\",\r\n      isLoggedIn:false,\r\n      fullname:\"Hii There !!!\",\r\n      gmail:\"\",\r\n      isSaveLoading:false\r\n    })\r\n  }\r\n\r\n  handleRegister = ()=>{\r\n    this.setState({\r\n      route:\"registerpage\"\r\n    })\r\n  }\r\n\r\n  handleHome = ()=>{\r\n    this.setState({\r\n      route:\"main\"\r\n    })\r\n  }\r\n\r\n  //adding project functionality button in maintained\r\n  //triggered when add project button is clicked \r\n  handleProjectName = () => {\r\n    var newProjectName = prompt(\"Enter project name\");\r\n    if(newProjectName!==null){\r\n      if(newProjectName.trim()!==\"\"){\r\n\r\n        var newProject = { \"projectKey\":Date.now(),\"name\":newProjectName } \r\n        var updatedProjects = [...this.state.projects,newProject];\r\n        \r\n        this.setState({\r\n          projects:updatedProjects\r\n        })\r\n        \r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  //this is deleting project and also tasks associated with that project\r\n  //triggered when trash icon of project is clicked \r\n  handleDeleteProject = (projectKey) => {\r\n    \r\n    //asking for confirmation \r\n    var areYouSure = window.confirm(\"Are you sure, this will delete your project\");\r\n    \r\n    if(areYouSure){\r\n\r\n      //deleting projects\r\n      var updatedProject = this.state.projects.filter((project)=>{\r\n        return project.projectKey!==projectKey\r\n      })\r\n      this.setState({\r\n        projects:updatedProject\r\n      })\r\n\r\n      //deleting tasks\r\n      var updatedtasks = this.state.tasks.filter((task)=>{\r\n        return task.projectKey!==projectKey\r\n      })\r\n\r\n      this.setState({\r\n        tasks:updatedtasks\r\n      })\r\n\r\n    }\r\n\r\n  }\r\n\r\n  //this will update the state of currentProjectId\r\n  //triggered when you click on project name\r\n  handleCurrentProjectId = (currentprojectid) =>{\r\n    this.setState({currentProjectId:currentprojectid})\r\n  }\r\n\r\n\r\n  //this will update the input field by updating currentText state\r\n  //called when change is detected in task adding input box\r\n  updateCurrentText = (event) => {\r\n    this.setState({currentText:event.target.value})\r\n  }\r\n\r\n  //this will create new task having current projectKey\r\n  //triggered when + button is clicked \r\n  handleAdd = (event) => {\r\n    event.preventDefault(); \r\n    let textTyped = this.state.currentText\r\n    \r\n    if(textTyped!==null){\r\n      if(textTyped.trim()!==\"\"){\r\n        var newTask = {\"taskKey\":Date.now(),\r\n          \"text\":this.state.currentText,\r\n          \"isCompleted\":false,\r\n          \"projectKey\":this.state.currentProjectId \r\n        }\r\n        \r\n        var updatedTasks = [...this.state.tasks,newTask];\r\n        this.setState({tasks:updatedTasks,currentText:\"\"})\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  //this will delete task simply using filter on taskKey\r\n  //triggered when you click trash icon of any task\r\n  handleDeleteTask = (taskkey) => {\r\n    \r\n    var updatedTasks = this.state.tasks.filter((task)=>{\r\n      return task.taskKey!==taskkey\r\n    })\r\n\r\n    this.setState({tasks:updatedTasks})\r\n  }\r\n\r\n\r\n  //this will get task having just checked check square set isCompleted property of that task to true\r\n  //triggered when you click on check square icon\r\n  handleCheckSquare = (taskkey) => {\r\n    var updatedTasks = this.state.tasks.filter((task)=>{\r\n      return task.taskKey!==taskkey\r\n    })\r\n\r\n    var completedTask = this.state.tasks.filter((task)=>{\r\n      return task.taskKey===taskkey\r\n    })\r\n    completedTask[0].isCompleted=true;\r\n    updatedTasks.push(completedTask[0]);\r\n\r\n    this.setState({tasks:updatedTasks})\r\n  } \r\n\r\n  //this will change route according to user register status\r\n  //triggered when response for register form is recieved\r\n  onRouteChangeInRegisterForm = () => {\r\n    this.setState({\r\n      route:\"loginpage\"\r\n    })\r\n  }\r\n\r\n  //this will change all view of the homepage and update state for db data\r\n  //triggered when we recieve userData\r\n  whenLoginFormRecieveData = (user) => {\r\n    this.setState({\r\n      route:\"main\",\r\n      isLoggedIn:true,\r\n      projects:user.projects,\r\n      tasks:user.tasks,\r\n      fullname:user.fullname,\r\n      gmail:user.gmail\r\n    })\r\n  }\r\n\r\n  //adding event listener so that when user closes this webapp his data will be saved\r\n  \r\n  // componentWillUnmount(){\r\n  //   window.addEventListener('beforeunload',(ev)=>{\r\n  //     ev.preventDefault();\r\n  //     console.log(\"hjj\")\r\n  //   })\r\n  // }\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div> \r\n        {(this.state.isPageLoading===true)?\r\n          (<PageLoading />):\r\n          (\r\n            <div>\r\n              <Navbar \r\n              currentRoute={this.state.route} \r\n              handleLogin={this.handleLogin} \r\n              handleLogout={this.handleLogout}\r\n              handleRegister={this.handleRegister}\r\n              handleHome={this.handleHome}\r\n              isLoggedIn={this.state.isLoggedIn}\r\n              handleSave={this.handleSave}\r\n              isSaveLoading={this.state.isSaveLoading}\r\n              fullname={this.state.fullname}\r\n              />\r\n\r\n              {this.state.route===\"loginpage\"?\r\n              <Loginpage \r\n              whenLoginFormRecieveData={this.whenLoginFormRecieveData}\r\n              />  :\r\n                (\r\n                  this.state.route===\"registerpage\"?\r\n                  <Registerpage \r\n                  onRouteChangeInRegisterForm={this.onRouteChangeInRegisterForm}\r\n                  /> :\r\n                  <div>\r\n                    <Sidebar \r\n                    handleProjectName={this.handleProjectName} \r\n                    projects={this.state.projects}\r\n                    handleDeleteProject={this.handleDeleteProject}\r\n                    handleCurrentProjectId={this.handleCurrentProjectId}\r\n                    />\r\n\r\n                    <Workspace \r\n                    handleAdd={this.handleAdd}\r\n                    currentText={this.state.currentText}\r\n                    currentProjectId={this.state.currentProjectId}\r\n                    tasks={this.state.tasks}\r\n                    updateCurrentText={this.updateCurrentText}\r\n                    handleDeleteTask ={this.handleDeleteTask}\r\n                    handleCheckSquare={this.handleCheckSquare}\r\n                    />\r\n\r\n                  </div>\r\n                )\r\n            \r\n              }\r\n            </div>\r\n          )\r\n        }\r\n        \r\n \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// window.addEventListener('beforeunload', (event) => {\r\n//   // Cancel the event as stated by the standard.\r\n//   event.preventDefault();\r\n  \r\n//   if(stateToUpload.gmail.trim()!==\"\"){\r\n    \r\n//     fetch(\"http://localhost:4000/update\",{\r\n//         headers:{\r\n//             'Content-Type':'application/json'\r\n//         },\r\n//         method:\"POST\",\r\n//         body: JSON.stringify({\r\n//           gmail:stateToUpload.gmail,\r\n//           projects:stateToUpload.projects,\r\n//           tasks:stateToUpload.tasks\r\n//         }) \r\n//     }).then(res=>res.json())\r\n//      .then(res=>console.log(res))\r\n    \r\n\r\n//   }else{\r\n//     console.log(\"not logged in\")\r\n//   }\r\n  \r\n  \r\n//  console.log(stateToUpload)\r\n//  Chrome requires returnValue to be set.\r\n//  event.returnValue = 'your tasks will be saved';\r\n// });\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}